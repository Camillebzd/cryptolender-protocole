{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "listingCreator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "ListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "listingCreator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "listingCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerDay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ListingManager.ListingTime",
              "name": "listingTime",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "isProRated",
              "type": "bool"
            },
            {
              "internalType": "enum ListingManager.ListingStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct ListingManager.Listing",
          "name": "listing",
          "type": "tuple"
        }
      ],
      "name": "ListingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "listingCreator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "listingCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerDay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ListingManager.ListingTime",
              "name": "listingTime",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "isProRated",
              "type": "bool"
            },
            {
              "internalType": "enum ListingManager.ListingStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct ListingManager.Listing",
          "name": "listing",
          "type": "tuple"
        }
      ],
      "name": "ListingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listingId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerDay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isProRated",
              "type": "bool"
            }
          ],
          "internalType": "struct ListingManager.ListingParameters",
          "name": "_listingParameters",
          "type": "tuple"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isTokenListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "listingCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerDay",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ListingManager.ListingTime",
          "name": "listingTime",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isProRated",
          "type": "bool"
        },
        {
          "internalType": "enum ListingManager.ListingStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentalManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listingId",
          "type": "uint256"
        },
        {
          "internalType": "enum ListingManager.ListingStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setListingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentalManager",
          "type": "address"
        }
      ],
      "name": "setRentalManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumListing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listingId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerDay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isProRated",
              "type": "bool"
            }
          ],
          "internalType": "struct ListingManager.ListingParameters",
          "name": "_listingParameters",
          "type": "tuple"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87fc09acd45ffaabf3c0ef846b71b1860d17500355ee9947be3841bb64e0186e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2136545",
    "logsBloom": "0x
    "blockHash": "0xce357f221cf7a841dcfeefdf40e0755ba6ab47ff7010a3f5c72cce70107779ad",
    "transactionHash": "0x87fc09acd45ffaabf3c0ef846b71b1860d17500355ee9947be3841bb64e0186e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x87fc09acd45ffaabf3c0ef846b71b1860d17500355ee9947be3841bb64e0186e",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xce357f221cf7a841dcfeefdf40e0755ba6ab47ff7010a3f5c72cce70107779ad"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "2136545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "69948cb467ee74509f51748af70691c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ListingManager.ListingTime\",\"name\":\"listingTime\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isProRated\",\"type\":\"bool\"},{\"internalType\":\"enum ListingManager.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct ListingManager.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ListingManager.ListingTime\",\"name\":\"listingTime\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isProRated\",\"type\":\"bool\"},{\"internalType\":\"enum ListingManager.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct ListingManager.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProRated\",\"type\":\"bool\"}],\"internalType\":\"struct ListingManager.ListingParameters\",\"name\":\"_listingParameters\",\"type\":\"tuple\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ListingManager.ListingTime\",\"name\":\"listingTime\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isProRated\",\"type\":\"bool\"},{\"internalType\":\"enum ListingManager.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentalManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"enum ListingManager.ListingStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setListingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentalManager\",\"type\":\"address\"}],\"name\":\"setRentalManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProRated\",\"type\":\"bool\"}],\"internalType\":\"struct ListingManager.ListingParameters\",\"name\":\"_listingParameters\",\"type\":\"tuple\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelListing(uint256)\":{\"details\":\"Cancel a listing Note that the owner of the listing is checked with the modifier onlyListingOwner\",\"params\":{\"_listingId\":\"Id of the listing\"}},\"createListing((address,uint256,uint256,uint256,uint256,uint256,uint256,bool))\":{\"details\":\"Create a listing on the protocol. The NFT is not transfered in the Vault at this steps.\",\"params\":{\"_listingParameters\":\"all the details needed for the listing like the token id, the token address, etc.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setListingStatus(uint256,uint8)\":{\"details\":\"Allow the others contracts of the protocol to modify a listing \",\"params\":{\"_listingId\":\"Id of the listing\",\"_status\":\"Status to set the listing to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateListing(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,bool))\":{\"details\":\"Update the listing, you can only update the collateralAmount, start & end timestamp, pricePerDay and the comment Note that the owner of the listing is checked with the modifier onlyListingOwner\",\"params\":{\"_listingId\":\"Id of the listing\",\"_listingParameters\":\"all the details needed for the listing like the token id, the token address, etc.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ListingManager.sol\":\"ListingManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ListingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// safe imports\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ListingManager is Ownable {\\r\\n    // type declarations\\r\\n    enum ListingStatus { UNSET, AVAILABLE, RENTED, CANCELLED }\\r\\n    struct ListingParameters {\\r\\n        address assetContract;\\r\\n        uint256 tokenId;\\r\\n        uint256 collateralAmount;\\r\\n        uint256 pricePerDay;\\r\\n        uint256 startTimestamp;  // timestamp for the start of the listing\\r\\n        uint256 endTimestamp;    // timestamp for the end of the listing\\r\\n        uint256 duration;        // timestamp for the duration of the renting TODO is it in seconds or millisecond???\\r\\n        bool isProRated;\\r\\n    }\\r\\n    struct ListingTime {\\r\\n        uint256 startTimestamp;  // timestamp for the start of the listing\\r\\n        uint256 endTimestamp;    // timestamp for the end of the listing\\r\\n        uint256 duration;        // timestamp for the duration of the renting\\r\\n    }\\r\\n    struct Listing {\\r\\n        uint256 listingId;\\r\\n        address listingCreator;\\r\\n        address assetContract;\\r\\n        uint256 tokenId;\\r\\n        uint256 collateralAmount;\\r\\n        uint256 pricePerDay;\\r\\n        ListingTime listingTime;\\r\\n        bool isProRated;\\r\\n        ListingStatus status;\\r\\n    }\\r\\n\\r\\n    // state variables\\r\\n    uint256 public totalNumListing = 0; // used as counter\\r\\n    mapping(uint256 => Listing) public listings;\\r\\n    mapping(address => mapping(uint256 => bool)) public isTokenListed; // first key is contract address and second is token id\\r\\n    address public rentalManager;\\r\\n    address public vault; // address of vault\\r\\n\\r\\n    // events\\r\\n    event ListingCreated(\\r\\n        address indexed listingCreator,\\r\\n        address indexed assetContract,\\r\\n        uint256 indexed listingId,\\r\\n        Listing listing\\r\\n    );\\r\\n    event ListingUpdated(\\r\\n        address indexed listingCreator,\\r\\n        address indexed assetContract,\\r\\n        uint256 indexed listingId,\\r\\n        Listing listing\\r\\n    );\\r\\n    event ListingCancelled(\\r\\n        address indexed listingCreator,\\r\\n        uint256 indexed listingId\\r\\n    );\\r\\n\\r\\n    // functions modifiers\\r\\n    modifier onlyListingOwner(uint256 listingId) {\\r\\n        require(listings[listingId].listingCreator == msg.sender, \\\"Error: you are not the owner of the listing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProtocol() {\\r\\n        require(msg.sender == rentalManager || msg.sender == vault, \\\"Only called by protocole\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // functions\\r\\n    constructor() {}\\r\\n\\r\\n    function setRentalManager(address _rentalManager) external onlyOwner {\\r\\n        rentalManager = _rentalManager;\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) external onlyOwner {\\r\\n        vault = _vault;\\r\\n    }\\r\\n\\r\\n    /// @dev Create a listing on the protocol.\\r\\n    /// The NFT is not transfered in the Vault at this steps.\\r\\n    /// @param _listingParameters all the details needed for the listing like the token id, the token address, etc.\\r\\n    function createListing(ListingParameters memory _listingParameters) external {\\r\\n        require(isTokenListed[_listingParameters.assetContract][_listingParameters.tokenId] == false, \\\"Can not create 2 listings of same NFT\\\");\\r\\n        require(_listingParameters.assetContract != address(0), \\\"Invalid nft contract address\\\");\\r\\n        require(\\r\\n            ERC721(_listingParameters.assetContract).isApprovedForAll(msg.sender, vault) == true,\\r\\n            \\\"Vault contract is not approved to transfer this nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            ERC721(_listingParameters.assetContract).ownerOf(_listingParameters.tokenId) == msg.sender,\\r\\n            \\\"You are not the owner of the nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            _listingParameters.startTimestamp >= block.timestamp && _listingParameters.endTimestamp > _listingParameters.startTimestamp, \\r\\n            \\\"Invalid end timestamp\\\"\\r\\n        );\\r\\n        require(_listingParameters.collateralAmount > 0, \\\"Can't accept 0 collateral\\\");\\r\\n        require(_listingParameters.duration > 1 days, \\\"Duration can't be less than one day\\\");\\r\\n\\r\\n        listings[totalNumListing] = Listing(totalNumListing, msg.sender, _listingParameters.assetContract, \\r\\n            _listingParameters.tokenId, _listingParameters.collateralAmount, _listingParameters.pricePerDay,\\r\\n            ListingTime(_listingParameters.startTimestamp, _listingParameters.endTimestamp, _listingParameters.duration),\\r\\n            _listingParameters.isProRated, ListingStatus.AVAILABLE\\r\\n        );\\r\\n        isTokenListed[_listingParameters.assetContract][_listingParameters.tokenId] = true;\\r\\n        emit ListingCreated(msg.sender, _listingParameters.assetContract, totalNumListing, listings[totalNumListing]);\\r\\n        totalNumListing++;\\r\\n    }\\r\\n\\r\\n    /// @param _listingId Id of the listing\\r\\n    /// @param _listingParameters all the details needed for the listing like the token id, the token address, etc.\\r\\n    /// @dev Update the listing, you can only update the collateralAmount, start & end timestamp, pricePerDay and the comment\\r\\n    /// Note that the owner of the listing is checked with the modifier onlyListingOwner\\r\\n    function updateListing(uint256 _listingId, ListingParameters memory _listingParameters) external onlyListingOwner(_listingId) {\\r\\n        Listing storage listing = listings[_listingId];\\r\\n        require(listing.status == ListingStatus.AVAILABLE, \\\"Listing is invalid\\\");\\r\\n        require(\\r\\n            ERC721(_listingParameters.assetContract).isApprovedForAll(msg.sender, vault) == true,\\r\\n            \\\"Vault contract is not approved to transfer this nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            ERC721(_listingParameters.assetContract).ownerOf(_listingParameters.tokenId) == msg.sender,\\r\\n            \\\"You are not the owner of the nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            _listingParameters.startTimestamp >= block.timestamp && _listingParameters.endTimestamp > _listingParameters.startTimestamp, \\r\\n            \\\"Invalid end timestamp\\\"\\r\\n        );\\r\\n        require(_listingParameters.collateralAmount > 0, \\\"Can't accept 0 collateral\\\");\\r\\n        // let the user changes all?\\r\\n        listing.collateralAmount = _listingParameters.collateralAmount;\\r\\n        listing.listingTime.startTimestamp = _listingParameters.startTimestamp;\\r\\n        listing.listingTime.endTimestamp = _listingParameters.endTimestamp;\\r\\n        listing.listingTime.duration = _listingParameters.duration;\\r\\n        listing.pricePerDay = _listingParameters.pricePerDay;\\r\\n        listing.isProRated = _listingParameters.isProRated;\\r\\n        emit ListingUpdated(msg.sender, listings[totalNumListing].assetContract, _listingId, listings[_listingId]);\\r\\n    }\\r\\n\\r\\n    /// @param _listingId Id of the listing\\r\\n    /// @dev Cancel a listing\\r\\n    /// Note that the owner of the listing is checked with the modifier onlyListingOwner\\r\\n    function cancelListing(uint256 _listingId) external onlyListingOwner(_listingId) {\\r\\n        require(listings[_listingId].status == ListingStatus.AVAILABLE, \\\"Listing is invalid\\\");\\r\\n\\r\\n        listings[_listingId].status = ListingStatus.CANCELLED;\\r\\n        emit ListingCancelled(msg.sender, _listingId);\\r\\n        isTokenListed[listings[_listingId].assetContract][listings[_listingId].tokenId] = false;\\r\\n    }\\r\\n\\r\\n    /// @param _listingId Id of the listing\\r\\n    /// @param _status Status to set the listing to\\r\\n    /// @dev Allow the others contracts of the protocol to modify a listing \\r\\n    function setListingStatus(uint256 _listingId, ListingStatus _status) public onlyProtocol {\\r\\n        listings[_listingId].status = _status;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfaa2624818984abb257292a7ca529d9c6c4d839f1437e47dacfcc294d1e7c066\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006001553480156200001657600080fd5b50620000376200002b6200003d60201b60201c565b6200004560201b60201c565b62000109565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61254f80620001196000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c278cff611610066578063c278cff61461020d578063de74e57b1461022b578063f2fde38b14610263578063fbfa77cf1461027f576100ea565b8063715018a6146101c95780637908507a146101d35780638da5cb5b146101ef576100ea565b806350fba90d116100c857806350fba90d146101455780635471b47a14610161578063577b540b146101915780636817031b146101ad576100ea565b80631797424f146100ef578063305a67a81461010d578063312be1d814610129575b600080fd5b6100f761029d565b6040516101049190611639565b60405180910390f35b6101276004803603810190610122919061168f565b6102a3565b005b610143600480360381019061013e91906116e1565b61050e565b005b61015f600480360381019061015a9190611912565b610638565b005b61017b60048036038101906101769190611953565b610b22565b60405161018891906119a2565b60405180910390f35b6101ab60048036038101906101a691906119bd565b610b51565b005b6101c760048036038101906101c291906119bd565b610b9d565b005b6101d1610be9565b005b6101ed60048036038101906101e891906119ea565b610bfd565b005b6101f761130d565b6040516102049190611a27565b60405180910390f35b610215611336565b6040516102229190611a27565b60405180910390f35b6102456004803603810190610240919061168f565b61135c565b60405161025a99989796959493929190611b0a565b60405180910390f35b61027d600480360381019061027891906119bd565b61142c565b005b6102876114b0565b6040516102949190611a27565b60405180910390f35b60015481565b803373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033f90611c1b565b60405180910390fd5b6001600381111561035c5761035b611a93565b5b6002600084815260200190815260200160002060090160019054906101000a900460ff16600381111561039257610391611a93565b5b146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611c87565b60405180910390fd5b60036002600084815260200190815260200160002060090160016101000a81548160ff0219169083600381111561040c5761040b611a93565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f93ec4766fcd2d9dfdceab8f2e13ba0d9d826645cf03167fdb92b3b7359b5248c60405160405180910390a36000600360006002600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002600086815260200190815260200160002060030154815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105b75750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90611cf3565b60405180910390fd5b806002600084815260200190815260200160002060090160016101000a81548160ff0219169083600381111561062f5761062e611a93565b5b02179055505050565b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490611c1b565b60405180910390fd5b60006002600085815260200190815260200160002090506001600381111561070857610707611a93565b5b8160090160019054906101000a900460ff16600381111561072c5761072b611a93565b5b1461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611c87565b60405180910390fd5b60011515836000015173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016107d1929190611d13565b60206040518083038186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611d51565b151514610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a90611df0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16636352211e85602001516040518263ffffffff1660e01b81526004016108bb9190611639565b60206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611e25565b73ffffffffffffffffffffffffffffffffffffffff1614610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095890611e9e565b60405180910390fd5b4283608001511015801561097c575082608001518360a00151115b6109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290611f0a565b60405180910390fd5b6000836040015111610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611f76565b60405180910390fd5b82604001518160040181905550826080015181600601600001819055508260a0015181600601600101819055508260c001518160060160020181905550826060015181600501819055508260e001518160090160006101000a81548160ff0219169083151502179055508360026000600154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe6f8f557f1f6f6877259d22d56bfd180fe7c46439cf05872c9672237ab64f26260026000898152602001908152602001600020604051610b1491906121f7565b60405180910390a450505050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610b596114d6565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610ba56114d6565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bf16114d6565b610bfb6000611554565b565b6000151560036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360200151815260200190815260200160002060009054906101000a900460ff16151514610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca090612285565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906122f1565b60405180910390fd5b60011515816000015173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610d82929190611d13565b60206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611d51565b151514610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b90611df0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16636352211e83602001516040518263ffffffff1660e01b8152600401610e6c9190611639565b60206040518083038186803b158015610e8457600080fd5b505afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611e25565b73ffffffffffffffffffffffffffffffffffffffff1614610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990611e9e565b60405180910390fd5b42816080015110158015610f2d575080608001518160a00151115b610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390611f0a565b60405180910390fd5b6000816040015111610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90611f76565b60405180910390fd5b620151808160c0015111610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff390612383565b60405180910390fd5b60405180610120016040528060015481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001826000015173ffffffffffffffffffffffffffffffffffffffff1681526020018260200151815260200182604001518152602001826060015181526020016040518060600160405280846080015181526020018460a0015181526020018460c0015181525081526020018260e0015115158152602001600160038111156110b6576110b5611a93565b5b8152506002600060015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c082015181600601600082015181600001556020820151816001015560408201518160020155505060e08201518160090160006101000a81548160ff0219169083151502179055506101008201518160090160016101000a81548160ff021916908360038111156111f9576111f8611a93565b5b0217905550905050600160036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360200151815260200190815260200160002060006101000a81548160ff021916908315150217905550600154816000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8d2ecbd96403c4556b1cff84a02f3ec0a3cfb293cdd7d8ebabfd3c5e204ef2546002600060015481526020019081526020016000206040516112ea91906121f7565b60405180910390a460016000815480929190611305906123d2565b919050555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005015490806006016040518060600160405290816000820154815260200160018201548152602001600282015481525050908060090160009054906101000a900460ff16908060090160019054906101000a900460ff16905089565b6114346114d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b9061248d565b60405180910390fd5b6114ad81611554565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114de611618565b73ffffffffffffffffffffffffffffffffffffffff166114fc61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611549906124f9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61163381611620565b82525050565b600060208201905061164e600083018461162a565b92915050565b6000604051905090565b600080fd5b61166c81611620565b811461167757600080fd5b50565b60008135905061168981611663565b92915050565b6000602082840312156116a5576116a461165e565b5b60006116b38482850161167a565b91505092915050565b600481106116c957600080fd5b50565b6000813590506116db816116bc565b92915050565b600080604083850312156116f8576116f761165e565b5b60006117068582860161167a565b9250506020611717858286016116cc565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61176f82611726565b810181811067ffffffffffffffff8211171561178e5761178d611737565b5b80604052505050565b60006117a1611654565b90506117ad8282611766565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117dd826117b2565b9050919050565b6117ed816117d2565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b60008115159050919050565b61182581611810565b811461183057600080fd5b50565b6000813590506118428161181c565b92915050565b6000610100828403121561185f5761185e611721565b5b61186a610100611797565b9050600061187a848285016117fb565b600083015250602061188e8482850161167a565b60208301525060406118a28482850161167a565b60408301525060606118b68482850161167a565b60608301525060806118ca8482850161167a565b60808301525060a06118de8482850161167a565b60a08301525060c06118f28482850161167a565b60c08301525060e061190684828501611833565b60e08301525092915050565b600080610120838503121561192a5761192961165e565b5b60006119388582860161167a565b925050602061194985828601611848565b9150509250929050565b6000806040838503121561196a5761196961165e565b5b6000611978858286016117fb565b92505060206119898582860161167a565b9150509250929050565b61199c81611810565b82525050565b60006020820190506119b76000830184611993565b92915050565b6000602082840312156119d3576119d261165e565b5b60006119e1848285016117fb565b91505092915050565b60006101008284031215611a0157611a0061165e565b5b6000611a0f84828501611848565b91505092915050565b611a21816117d2565b82525050565b6000602082019050611a3c6000830184611a18565b92915050565b611a4b81611620565b82525050565b606082016000820151611a676000850182611a42565b506020820151611a7a6020850182611a42565b506040820151611a8d6040850182611a42565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611ad357611ad2611a93565b5b50565b6000819050611ae482611ac2565b919050565b6000611af482611ad6565b9050919050565b611b0481611ae9565b82525050565b600061016082019050611b20600083018c61162a565b611b2d602083018b611a18565b611b3a604083018a611a18565b611b47606083018961162a565b611b54608083018861162a565b611b6160a083018761162a565b611b6e60c0830186611a51565b611b7c610120830185611993565b611b8a610140830184611afb565b9a9950505050505050505050565b600082825260208201905092915050565b7f4572726f723a20796f7520617265206e6f7420746865206f776e6572206f662060008201527f746865206c697374696e67000000000000000000000000000000000000000000602082015250565b6000611c05602b83611b98565b9150611c1082611ba9565b604082019050919050565b60006020820190508181036000830152611c3481611bf8565b9050919050565b7f4c697374696e6720697320696e76616c69640000000000000000000000000000600082015250565b6000611c71601283611b98565b9150611c7c82611c3b565b602082019050919050565b60006020820190508181036000830152611ca081611c64565b9050919050565b7f4f6e6c792063616c6c65642062792070726f746f636f6c650000000000000000600082015250565b6000611cdd601883611b98565b9150611ce882611ca7565b602082019050919050565b60006020820190508181036000830152611d0c81611cd0565b9050919050565b6000604082019050611d286000830185611a18565b611d356020830184611a18565b9392505050565b600081519050611d4b8161181c565b92915050565b600060208284031215611d6757611d6661165e565b5b6000611d7584828501611d3c565b91505092915050565b7f5661756c7420636f6e7472616374206973206e6f7420617070726f766564207460008201527f6f207472616e736665722074686973206e667400000000000000000000000000602082015250565b6000611dda603383611b98565b9150611de582611d7e565b604082019050919050565b60006020820190508181036000830152611e0981611dcd565b9050919050565b600081519050611e1f816117e4565b92915050565b600060208284031215611e3b57611e3a61165e565b5b6000611e4984828501611e10565b91505092915050565b7f596f7520617265206e6f7420746865206f776e6572206f6620746865206e6674600082015250565b6000611e88602083611b98565b9150611e9382611e52565b602082019050919050565b60006020820190508181036000830152611eb781611e7b565b9050919050565b7f496e76616c696420656e642074696d657374616d700000000000000000000000600082015250565b6000611ef4601583611b98565b9150611eff82611ebe565b602082019050919050565b60006020820190508181036000830152611f2381611ee7565b9050919050565b7f43616e277420616363657074203020636f6c6c61746572616c00000000000000600082015250565b6000611f60601983611b98565b9150611f6b82611f2a565b602082019050919050565b60006020820190508181036000830152611f8f81611f53565b9050919050565b60008160001c9050919050565b6000819050919050565b6000611fc0611fbb83611f96565b611fa3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ffa611ff583611f96565b611fc7565b9050919050565b61200a816117d2565b82525050565b60608201600080830154905061202581611fad565b6120326000860182611a42565b506001830154905061204381611fad565b6120506020860182611a42565b506002830154905061206181611fad565b61206e6040860182611a42565b5050505050565b600060ff82169050919050565b600061209561209083611f96565b612075565b9050919050565b6120a581611810565b82525050565b60008160081c9050919050565b600060ff82169050919050565b60006120d86120d3836120ab565b6120b8565b9050919050565b6120e881611ae9565b82525050565b6101608201600080830154905061210481611fad565b6121116000860182611a42565b506001830154905061212281611fe7565b61212f6020860182612001565b506002830154905061214081611fe7565b61214d6040860182612001565b506003830154905061215e81611fad565b61216b6060860182611a42565b506004830154905061217c81611fad565b6121896080860182611a42565b506005830154905061219a81611fad565b6121a760a0860182611a42565b50600683016121b960c0860182612010565b50600983015490506121ca81612082565b6121d861012086018261209c565b506121e2816120c5565b6121f06101408601826120df565b5050505050565b60006101608201905061220d60008301846120ee565b92915050565b7f43616e206e6f74206372656174652032206c697374696e6773206f662073616d60008201527f65204e4654000000000000000000000000000000000000000000000000000000602082015250565b600061226f602583611b98565b915061227a82612213565b604082019050919050565b6000602082019050818103600083015261229e81612262565b9050919050565b7f496e76616c6964206e667420636f6e7472616374206164647265737300000000600082015250565b60006122db601c83611b98565b91506122e6826122a5565b602082019050919050565b6000602082019050818103600083015261230a816122ce565b9050919050565b7f4475726174696f6e2063616e2774206265206c657373207468616e206f6e652060008201527f6461790000000000000000000000000000000000000000000000000000000000602082015250565b600061236d602383611b98565b915061237882612311565b604082019050919050565b6000602082019050818103600083015261239c81612360565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123dd82611620565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124105761240f6123a3565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612477602683611b98565b91506124828261241b565b604082019050919050565b600060208201905081810360008301526124a68161246a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006124e3602083611b98565b91506124ee826124ad565b602082019050919050565b60006020820190508181036000830152612512816124d6565b905091905056fea2646970667358221220287148b8c30921bb2317f78fc80ac335bb1112013551b370eabd037aec9b8e3564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c278cff611610066578063c278cff61461020d578063de74e57b1461022b578063f2fde38b14610263578063fbfa77cf1461027f576100ea565b8063715018a6146101c95780637908507a146101d35780638da5cb5b146101ef576100ea565b806350fba90d116100c857806350fba90d146101455780635471b47a14610161578063577b540b146101915780636817031b146101ad576100ea565b80631797424f146100ef578063305a67a81461010d578063312be1d814610129575b600080fd5b6100f761029d565b6040516101049190611639565b60405180910390f35b6101276004803603810190610122919061168f565b6102a3565b005b610143600480360381019061013e91906116e1565b61050e565b005b61015f600480360381019061015a9190611912565b610638565b005b61017b60048036038101906101769190611953565b610b22565b60405161018891906119a2565b60405180910390f35b6101ab60048036038101906101a691906119bd565b610b51565b005b6101c760048036038101906101c291906119bd565b610b9d565b005b6101d1610be9565b005b6101ed60048036038101906101e891906119ea565b610bfd565b005b6101f761130d565b6040516102049190611a27565b60405180910390f35b610215611336565b6040516102229190611a27565b60405180910390f35b6102456004803603810190610240919061168f565b61135c565b60405161025a99989796959493929190611b0a565b60405180910390f35b61027d600480360381019061027891906119bd565b61142c565b005b6102876114b0565b6040516102949190611a27565b60405180910390f35b60015481565b803373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033f90611c1b565b60405180910390fd5b6001600381111561035c5761035b611a93565b5b6002600084815260200190815260200160002060090160019054906101000a900460ff16600381111561039257610391611a93565b5b146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611c87565b60405180910390fd5b60036002600084815260200190815260200160002060090160016101000a81548160ff0219169083600381111561040c5761040b611a93565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f93ec4766fcd2d9dfdceab8f2e13ba0d9d826645cf03167fdb92b3b7359b5248c60405160405180910390a36000600360006002600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002600086815260200190815260200160002060030154815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105b75750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90611cf3565b60405180910390fd5b806002600084815260200190815260200160002060090160016101000a81548160ff0219169083600381111561062f5761062e611a93565b5b02179055505050565b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490611c1b565b60405180910390fd5b60006002600085815260200190815260200160002090506001600381111561070857610707611a93565b5b8160090160019054906101000a900460ff16600381111561072c5761072b611a93565b5b1461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611c87565b60405180910390fd5b60011515836000015173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016107d1929190611d13565b60206040518083038186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611d51565b151514610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a90611df0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16636352211e85602001516040518263ffffffff1660e01b81526004016108bb9190611639565b60206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611e25565b73ffffffffffffffffffffffffffffffffffffffff1614610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095890611e9e565b60405180910390fd5b4283608001511015801561097c575082608001518360a00151115b6109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290611f0a565b60405180910390fd5b6000836040015111610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611f76565b60405180910390fd5b82604001518160040181905550826080015181600601600001819055508260a0015181600601600101819055508260c001518160060160020181905550826060015181600501819055508260e001518160090160006101000a81548160ff0219169083151502179055508360026000600154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe6f8f557f1f6f6877259d22d56bfd180fe7c46439cf05872c9672237ab64f26260026000898152602001908152602001600020604051610b1491906121f7565b60405180910390a450505050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610b596114d6565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610ba56114d6565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bf16114d6565b610bfb6000611554565b565b6000151560036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360200151815260200190815260200160002060009054906101000a900460ff16151514610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca090612285565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906122f1565b60405180910390fd5b60011515816000015173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610d82929190611d13565b60206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611d51565b151514610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b90611df0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16636352211e83602001516040518263ffffffff1660e01b8152600401610e6c9190611639565b60206040518083038186803b158015610e8457600080fd5b505afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611e25565b73ffffffffffffffffffffffffffffffffffffffff1614610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990611e9e565b60405180910390fd5b42816080015110158015610f2d575080608001518160a00151115b610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390611f0a565b60405180910390fd5b6000816040015111610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90611f76565b60405180910390fd5b620151808160c0015111610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff390612383565b60405180910390fd5b60405180610120016040528060015481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001826000015173ffffffffffffffffffffffffffffffffffffffff1681526020018260200151815260200182604001518152602001826060015181526020016040518060600160405280846080015181526020018460a0015181526020018460c0015181525081526020018260e0015115158152602001600160038111156110b6576110b5611a93565b5b8152506002600060015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c082015181600601600082015181600001556020820151816001015560408201518160020155505060e08201518160090160006101000a81548160ff0219169083151502179055506101008201518160090160016101000a81548160ff021916908360038111156111f9576111f8611a93565b5b0217905550905050600160036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360200151815260200190815260200160002060006101000a81548160ff021916908315150217905550600154816000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8d2ecbd96403c4556b1cff84a02f3ec0a3cfb293cdd7d8ebabfd3c5e204ef2546002600060015481526020019081526020016000206040516112ea91906121f7565b60405180910390a460016000815480929190611305906123d2565b919050555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005015490806006016040518060600160405290816000820154815260200160018201548152602001600282015481525050908060090160009054906101000a900460ff16908060090160019054906101000a900460ff16905089565b6114346114d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b9061248d565b60405180910390fd5b6114ad81611554565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114de611618565b73ffffffffffffffffffffffffffffffffffffffff166114fc61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611549906124f9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61163381611620565b82525050565b600060208201905061164e600083018461162a565b92915050565b6000604051905090565b600080fd5b61166c81611620565b811461167757600080fd5b50565b60008135905061168981611663565b92915050565b6000602082840312156116a5576116a461165e565b5b60006116b38482850161167a565b91505092915050565b600481106116c957600080fd5b50565b6000813590506116db816116bc565b92915050565b600080604083850312156116f8576116f761165e565b5b60006117068582860161167a565b9250506020611717858286016116cc565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61176f82611726565b810181811067ffffffffffffffff8211171561178e5761178d611737565b5b80604052505050565b60006117a1611654565b90506117ad8282611766565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117dd826117b2565b9050919050565b6117ed816117d2565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b60008115159050919050565b61182581611810565b811461183057600080fd5b50565b6000813590506118428161181c565b92915050565b6000610100828403121561185f5761185e611721565b5b61186a610100611797565b9050600061187a848285016117fb565b600083015250602061188e8482850161167a565b60208301525060406118a28482850161167a565b60408301525060606118b68482850161167a565b60608301525060806118ca8482850161167a565b60808301525060a06118de8482850161167a565b60a08301525060c06118f28482850161167a565b60c08301525060e061190684828501611833565b60e08301525092915050565b600080610120838503121561192a5761192961165e565b5b60006119388582860161167a565b925050602061194985828601611848565b9150509250929050565b6000806040838503121561196a5761196961165e565b5b6000611978858286016117fb565b92505060206119898582860161167a565b9150509250929050565b61199c81611810565b82525050565b60006020820190506119b76000830184611993565b92915050565b6000602082840312156119d3576119d261165e565b5b60006119e1848285016117fb565b91505092915050565b60006101008284031215611a0157611a0061165e565b5b6000611a0f84828501611848565b91505092915050565b611a21816117d2565b82525050565b6000602082019050611a3c6000830184611a18565b92915050565b611a4b81611620565b82525050565b606082016000820151611a676000850182611a42565b506020820151611a7a6020850182611a42565b506040820151611a8d6040850182611a42565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611ad357611ad2611a93565b5b50565b6000819050611ae482611ac2565b919050565b6000611af482611ad6565b9050919050565b611b0481611ae9565b82525050565b600061016082019050611b20600083018c61162a565b611b2d602083018b611a18565b611b3a604083018a611a18565b611b47606083018961162a565b611b54608083018861162a565b611b6160a083018761162a565b611b6e60c0830186611a51565b611b7c610120830185611993565b611b8a610140830184611afb565b9a9950505050505050505050565b600082825260208201905092915050565b7f4572726f723a20796f7520617265206e6f7420746865206f776e6572206f662060008201527f746865206c697374696e67000000000000000000000000000000000000000000602082015250565b6000611c05602b83611b98565b9150611c1082611ba9565b604082019050919050565b60006020820190508181036000830152611c3481611bf8565b9050919050565b7f4c697374696e6720697320696e76616c69640000000000000000000000000000600082015250565b6000611c71601283611b98565b9150611c7c82611c3b565b602082019050919050565b60006020820190508181036000830152611ca081611c64565b9050919050565b7f4f6e6c792063616c6c65642062792070726f746f636f6c650000000000000000600082015250565b6000611cdd601883611b98565b9150611ce882611ca7565b602082019050919050565b60006020820190508181036000830152611d0c81611cd0565b9050919050565b6000604082019050611d286000830185611a18565b611d356020830184611a18565b9392505050565b600081519050611d4b8161181c565b92915050565b600060208284031215611d6757611d6661165e565b5b6000611d7584828501611d3c565b91505092915050565b7f5661756c7420636f6e7472616374206973206e6f7420617070726f766564207460008201527f6f207472616e736665722074686973206e667400000000000000000000000000602082015250565b6000611dda603383611b98565b9150611de582611d7e565b604082019050919050565b60006020820190508181036000830152611e0981611dcd565b9050919050565b600081519050611e1f816117e4565b92915050565b600060208284031215611e3b57611e3a61165e565b5b6000611e4984828501611e10565b91505092915050565b7f596f7520617265206e6f7420746865206f776e6572206f6620746865206e6674600082015250565b6000611e88602083611b98565b9150611e9382611e52565b602082019050919050565b60006020820190508181036000830152611eb781611e7b565b9050919050565b7f496e76616c696420656e642074696d657374616d700000000000000000000000600082015250565b6000611ef4601583611b98565b9150611eff82611ebe565b602082019050919050565b60006020820190508181036000830152611f2381611ee7565b9050919050565b7f43616e277420616363657074203020636f6c6c61746572616c00000000000000600082015250565b6000611f60601983611b98565b9150611f6b82611f2a565b602082019050919050565b60006020820190508181036000830152611f8f81611f53565b9050919050565b60008160001c9050919050565b6000819050919050565b6000611fc0611fbb83611f96565b611fa3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ffa611ff583611f96565b611fc7565b9050919050565b61200a816117d2565b82525050565b60608201600080830154905061202581611fad565b6120326000860182611a42565b506001830154905061204381611fad565b6120506020860182611a42565b506002830154905061206181611fad565b61206e6040860182611a42565b5050505050565b600060ff82169050919050565b600061209561209083611f96565b612075565b9050919050565b6120a581611810565b82525050565b60008160081c9050919050565b600060ff82169050919050565b60006120d86120d3836120ab565b6120b8565b9050919050565b6120e881611ae9565b82525050565b6101608201600080830154905061210481611fad565b6121116000860182611a42565b506001830154905061212281611fe7565b61212f6020860182612001565b506002830154905061214081611fe7565b61214d6040860182612001565b506003830154905061215e81611fad565b61216b6060860182611a42565b506004830154905061217c81611fad565b6121896080860182611a42565b506005830154905061219a81611fad565b6121a760a0860182611a42565b50600683016121b960c0860182612010565b50600983015490506121ca81612082565b6121d861012086018261209c565b506121e2816120c5565b6121f06101408601826120df565b5050505050565b60006101608201905061220d60008301846120ee565b92915050565b7f43616e206e6f74206372656174652032206c697374696e6773206f662073616d60008201527f65204e4654000000000000000000000000000000000000000000000000000000602082015250565b600061226f602583611b98565b915061227a82612213565b604082019050919050565b6000602082019050818103600083015261229e81612262565b9050919050565b7f496e76616c6964206e667420636f6e7472616374206164647265737300000000600082015250565b60006122db601c83611b98565b91506122e6826122a5565b602082019050919050565b6000602082019050818103600083015261230a816122ce565b9050919050565b7f4475726174696f6e2063616e2774206265206c657373207468616e206f6e652060008201527f6461790000000000000000000000000000000000000000000000000000000000602082015250565b600061236d602383611b98565b915061237882612311565b604082019050919050565b6000602082019050818103600083015261239c81612360565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123dd82611620565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124105761240f6123a3565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612477602683611b98565b91506124828261241b565b604082019050919050565b600060208201905081810360008301526124a68161246a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006124e3602083611b98565b91506124ee826124ad565b602082019050919050565b60006020820190508181036000830152612512816124d6565b905091905056fea2646970667358221220287148b8c30921bb2317f78fc80ac335bb1112013551b370eabd037aec9b8e3564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelListing(uint256)": {
        "details": "Cancel a listing Note that the owner of the listing is checked with the modifier onlyListingOwner",
        "params": {
          "_listingId": "Id of the listing"
        }
      },
      "createListing((address,uint256,uint256,uint256,uint256,uint256,uint256,bool))": {
        "details": "Create a listing on the protocol. The NFT is not transfered in the Vault at this steps.",
        "params": {
          "_listingParameters": "all the details needed for the listing like the token id, the token address, etc."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setListingStatus(uint256,uint8)": {
        "details": "Allow the others contracts of the protocol to modify a listing ",
        "params": {
          "_listingId": "Id of the listing",
          "_status": "Status to set the listing to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateListing(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,bool))": {
        "details": "Update the listing, you can only update the collateralAmount, start & end timestamp, pricePerDay and the comment Note that the owner of the listing is checked with the modifier onlyListingOwner",
        "params": {
          "_listingId": "Id of the listing",
          "_listingParameters": "all the details needed for the listing like the token id, the token address, etc."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3957,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "totalNumListing",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3962,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Listing)3954_storage)"
      },
      {
        "astId": 3968,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "isTokenListed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3970,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "rentalManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3972,
        "contract": "contracts/ListingManager.sol:ListingManager",
        "label": "vault",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ListingStatus)3909": {
        "encoding": "inplace",
        "label": "enum ListingManager.ListingStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Listing)3954_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ListingManager.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3954_storage"
      },
      "t_struct(Listing)3954_storage": {
        "encoding": "inplace",
        "label": "struct ListingManager.Listing",
        "members": [
          {
            "astId": 3935,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3937,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "listingCreator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3939,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "assetContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3941,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3943,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3945,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "pricePerDay",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3948,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "listingTime",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(ListingTime)3933_storage"
          },
          {
            "astId": 3950,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "isProRated",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 3953,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "status",
            "offset": 1,
            "slot": "9",
            "type": "t_enum(ListingStatus)3909"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(ListingTime)3933_storage": {
        "encoding": "inplace",
        "label": "struct ListingManager.ListingTime",
        "members": [
          {
            "astId": 3928,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3930,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3932,
            "contract": "contracts/ListingManager.sol:ListingManager",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}